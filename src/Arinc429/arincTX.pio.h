// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// arincTX //
// ------- //

#define arincTX_wrap_target 0
#define arincTX_wrap 9
#define arincTX_pio_version 0

#define arincTX_CLKMUL 8

static const uint16_t arincTX_program_instructions[] = {
            //     .wrap_target
    0xb042, //  0: nop                    side 0     
    0x80a0, //  1: pull   block                      
    0x7021, //  2: out    x, 1            side 0     
    0x1025, //  3: jmp    !x, 5           side 0     
    0x1706, //  4: jmp    6               side 1 [3] 
    0x1b06, //  5: jmp    6               side 2 [3] 
    0x11e2, //  6: jmp    !osre, 2        side 0 [1] 
    0xf04f, //  7: set    y, 15           side 0     
    0xb042, //  8: nop                    side 0     
    0x1088, //  9: jmp    y--, 8          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program arincTX_program = {
    .instructions = arincTX_program_instructions,
    .length = 10,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config arincTX_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + arincTX_wrap_target, offset + arincTX_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

// configure state machine
void arincTX_program_init(PIO pio, uint sm, uint offset, uint pin, uint baudrate) {
   const uint8_t pincount = 2; // TX high pin first, needs to be consecutive e.g. 19,20 or 4,5
   for (uint i = 0; i < pincount; i++) {
        pio_gpio_init(pio, (pin+i) % 32);   // init pins
   }
   // pins to output
   pio_sm_set_consecutive_pindirs(pio, sm, pin, pincount, true);
   // get default config ???
   pio_sm_config c = arincTX_program_get_default_config(offset);
   // out-mapping:
   sm_config_set_out_pins(&c, pin, pincount);
   sm_config_set_sideset_pins(&c, pin);
   // div <= 65535 (= 2^16-1) - not approved
   float div = (float)clock_get_hz(clk_sys) / (float)(baudrate * arincTX_CLKMUL);
   // clock divider
   sm_config_set_clkdiv(&c, div);
   // combine both 4x 32bit FIFOs to 8x 32-Bit FIFO
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
   // left shift, no auto-pull, 32 Bits (Bit 0 first)
   // (pio_sm_config * c, bool shift_right, bool autopull, uint pull_threshold)
   sm_config_set_out_shift(&c, true, false, 32);
   // init state machine
   pio_sm_init(pio, sm, offset, &c);
   // and start
   pio_sm_set_enabled(pio, sm, true);
}

#endif

