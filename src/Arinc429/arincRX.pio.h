// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// arincRX //
// ------- //

#define arincRX_wrap_target 0
#define arincRX_wrap 9
#define arincRX_pio_version 0

#define arincRX_CLKMUL 8

static const uint16_t arincRX_program_instructions[] = {
            //     .wrap_target
    0xe04e, //  0: set    y, 14                      
    0x00c0, //  1: jmp    pin, 0                     
    0x0081, //  2: jmp    y--, 1                     
    0xe03f, //  3: set    x, 31                      
    0x20a1, //  4: wait   1 pin, 1                   
    0x4301, //  5: in     pins, 1                [3] 
    0x00ca, //  6: jmp    pin, 10                    
    0x0044, //  7: jmp    x--, 4                     
    0x8020, //  8: push   block                      
    0xc014, //  9: irq    nowait 4 rel               
            //     .wrap
    0xc010, // 10: irq    nowait 0 rel               
    0x0000, // 11: jmp    0                          
};

#if !PICO_NO_HARDWARE
static const struct pio_program arincRX_program = {
    .instructions = arincRX_program_instructions,
    .length = 12,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config arincRX_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + arincRX_wrap_target, offset + arincRX_wrap);
    return c;
}

// configure state machine
void arincRX_program_init(PIO pio, uint sm, uint offset, uint pin, uint baudrate) {
   const uint8_t pincount = 2; // needs to be consecutive e.g. 19,20 or 4,5
   for (uint i = 0; i < pincount; i++) {
        pio_gpio_init(pio, (pin+i) % 24);   // init pins
   }
   gpio_pull_up(pin);
   gpio_pull_up(pin+1);
   // pins to intput
   pio_sm_set_consecutive_pindirs(pio, sm, pin, pincount, false);
   // get default config ???
   pio_sm_config c = arincRX_program_get_default_config(offset);
   // in-mapping:
   sm_config_set_in_pins(&c, pin);       // for WAIT, IN
   sm_config_set_jmp_pin(&c, pin+1);     // for JMP
   // div <= 65535 (= 2^16-1) - not approved
   float div = (float)clock_get_hz(clk_sys) / (baudrate * arincRX_CLKMUL);
   // clock divider
   sm_config_set_clkdiv(&c, div);
   // combine both 4x 32bit FIFOs to 8x 32-Bit FIFO
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
   // left shift, no auto-pull, 32 Bits (Bit 0 first)
   // (pio_sm_config * c, bool shift_right, bool autopull, uint pull_threshold)
   sm_config_set_in_shift(&c, true, false, 32);
   // init state machine
   pio_sm_init(pio, sm, offset, &c);
   // and start
   pio_sm_set_enabled(pio, sm, true);
}

#endif

